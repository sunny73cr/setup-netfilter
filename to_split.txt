#try_match_arp_reply (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SRC_MAC="$4", SRC_NET="$5", DST_MAC="$6", DST_NET="$7");
try_match_arp_reply () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SRC_MAC="$4";
	SRC_NET="$5";
	DST_MAC="$6";
	DST_NET="$7";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "arp_reply from $SRC_NET to $DST_NET; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "arp_reply from $SRC_NET to $DST_NET; interface must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "arp_reply from $SRC_NET to $DST_NET; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SRC_MAC ]; then
		if [ -z $DST_MAC ]; then
			echo "arp_reply from $SRC_MAC to $DST_MAC; either source or destination MAC must be provided.">&2;
			exit 2;
		fi
	fi
	
	if [ -n $SRC_MAC ]; then
		if [ "$(./check_mac_address_is_valid.sh --address $SRC_MAC)" = "false" ]; then
			echo "arp_reply from $SRC_MAC and $SRC_NET to $DST_MAC and $DST_NET; source MAC is not valid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SRC_NET ]; then
		echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; source NET must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SRC_NET)" = "false" ]; then
		echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; source NET is not valid.">&2;
		exit 2;
	fi
	
	if [ -n $DST_MAC ]; then
		if [ "$(./check_mac_address_is_valid.sh --address $DST_MAC)" = "false" ]; then
			echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; destination MAC is not valid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $DST_NET ]; then
		echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; destination NET must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DST_NET)" = "false" ]; then
		echo "arp_reply from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; destination NET is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0806" $VLAN_ID_DOT1Q $SRC_MAC $DST_MAC
	
	add_line "\t\tarp htype 1 \\\\";
	add_line "\t\tarp hlen 6 \\\\";
	
	add_line "\t\tarp ptype 0x0800 \\\\";
	add_line "\t\tarp plen 4 \\\\";
	
	add_line "\t\tarp operation 2 \\\\";

	if [ -z $SRC_MAC ]; then
		add_line "\t\t#arp saddr ether unknown";
	else
		add_line "\t\tarp saddr ether $SRC_MAC \\\\";
	fi
	
	if [ -z $DST_MAC ]; then
		add_line "\t\t#arp daddr ether unknown";
	else
		add_line "\t\tarp daddr ether $DST_MAC \\\\";
	fi
	
	add_line "\t\tarp saddr ip $SRC_NET \\\\";
	add_line "\t\tarp daddr ip $DST_NET \\\\";
	
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog prefix \"$INTERFACE_NAME ARP $DIR IPV4 Reply - Tell $DST_MAC:$DST_NET I am at $SRC_MAC:$SRC_NET address - \" \\\\";
	add_line "\t\taccept;";
}

#try_match_arp_reply_gratuitous (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SRC_MAC="$4", DST_NET="$5");
try_match_arp_reply_gratuitous () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SRC_MAC="$4";
	DST_NET="$5";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; unrecognised direction.">&2;
			exit 2;
		;;
	esac

	if [ -z $INTERFACE_NAME ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "arp_reply_gratuitous from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SRC_MAC ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; source MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SRC_MAC)" = "false" ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; source MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DST_NET ]; then
		echo "arp_reply_gratuitous from $SRC_MAC to $DST_NET; destination NET must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DST_NET)" = "false" ]; then
		echo "arp_reply_gratuitous from $SRC_MAC to $DST_NET; destination NET is not valid.">&2;
		exit 2;
	fi
	
	#################################################################################################################
	# Gratuitous ARP broadcast empty DST MAC
	#################################################################################################################
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0806" $VLAN_ID_DOT1Q $SRC_MAC $MAC_BROADCAST

	add_line "\t\tarp htype 1 \\\\";
	add_line "\t\tarp hlen 6 \\\\";
	
	add_line "\t\tarp ptype 0x0800 \\\\";
	add_line "\t\tarp plen 4 \\\\";
	
	add_line "\t\tarp operation 1 \\\\";
	
	add_line "\t\tarp saddr ether $SRC_MAC \\\\";
	add_line "\t\tarp daddr ether $MAC_UNSPECIFIED \\\\";

	add_line "\t\tarp saddr ip $DST_NET \\\\";
	add_line "\t\tarp daddr ip $DST_NET \\\\";
	
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog prefix \"$INTERFACE_NAME ARP $DIR IPV4 Gratuitous Reply - Broadcast a claim to $DST_NET Address\" \\\\";
	add_line "\t\taccept;";
	
	add_line "";
	
	#################################################################################################################
	# Gratuitous ARP broadcast duplicate SRC and DST MAC
	#################################################################################################################
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0806" $VLAN_ID_DOT1Q $SRC_MAC $MAC_BROADCAST

	add_line "\t\tarp htype 1 \\\\";
	add_line "\t\tarp hlen 6 \\\\";
	
	add_line "\t\tarp ptype 0x0800 \\\\";
	add_line "\t\tarp plen 4 \\\\";
	
	add_line "\t\tarp operation 2 \\\\";
	
	add_line "\t\tarp saddr ether $SRC_MAC \\\\";
	add_line "\t\tarp daddr ether $SRC_MAC \\\\";

	add_line "\t\tarp saddr ip $DST_NET \\\\";
	add_line "\t\tarp daddr ip $DST_NET \\\\";
	
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog prefix \"$INTERFACE_NAME ARP $DIR IPV4 Gratuitous Reply - Broadcast a claim to $DST_NET Address\" \\\\";
	add_line "\t\taccept;";
}

#try_match_icmpv4_port_unreachable(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SOURCE_MAC="$4", SOURCE_IP="$5", SOURCE_PORT="$6", DESTINATION_MAC="$7", DESTINATION_IP="$8", DESTINATION_PORT="$9", SERVICE_UID="$10");
try_match_icmpv4_port_unreachable () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SOURCE_MAC="$4";
	SOURCE_IP="$5";
	SOURCE_PORT="$6";
	DESTINATION_MAC="$7";
	DESTINATION_IP="$8";
	DESTINATION_PORT="$9";
	SERVICE_UID="${10}";
	
	OPERATION_DESCRIPTION_STRING="try_match_icmpv4_port_unreachable";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac

	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SOURCE_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SOURCE_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SOURCE_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SOURCE_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $DESTINATION_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DESTINATION_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SOURCE_MAC $DESTINATION_MAC
	
	signature_ipv4 $SOURCE_IP $DESTINATION_IP
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tip protocol 1 \\\\";
	
	add_line "\t\t#ICMP Type 3 - Destination Unreachable";
	add_line "\t\t@ih,0,8 3 \\\\";
	
	add_line "\t\t#ICMP Code 3 - Port Unreachable";
	add_line "\t\t@ih,8,8 3 \\\\";
	
	add_line "\t\t#ICMP Checksum (ensure not empty)";
	add_line "\t\t@ih,16,16 != 0 \\\\";
	
	add_line "\t\t#ICMP unused bits (ensure empty)";
	add_line "\t\t@ih,32,32 0 \\\\";

	#TODO: Check that what follows is really the original IPV4 header, and 64 bits of the UDP datagram (also the header)
	#add_line "\t\t";
}

#try_match_ipv4_tcp_fin (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SOURCE_MAC="$4", SOURCE_IP="$5", SOURCE_PORT="$6", DESTINATION_MAC="$7", DESTINATION_IP="$8", DESTINATION_PORT="$9", SERVICE_UID="$10");
try_match_ipv4_tcp_fin () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SOURCE_MAC="$4";
	SOURCE_IP="$5";
	SOURCE_PORT="$6";
	DESTINATION_MAC="$7";
	DESTINATION_IP="$8";
	DESTINATION_PORT="$9";
	SERVICE_UID="${10}";
	
	OPERATION_DESCRIPTION_STRING="try_match_ipv4_tcp_fin";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac

	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SOURCE_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SOURCE_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SOURCE_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SOURCE_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SOURCE_PORT ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source port must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_port_is_valid.sh --port $SOURCE_PORT)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source port is invalid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $DESTINATION_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DESTINATION_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_PORT ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination port must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_port_is_valid.sh --port $DESTINATION_PORT)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination port is invalid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SOURCE_MAC $DESTINATION_MAC
	
	signature_ipv4 $SOURCE_IP $DESTINATION_IP
	
	signature_protocol "6" $SOURCE_PORT $DESTINATION_PORT

	match_tcp_flags_cwr_unset
	match_tcp_flags_ece_unset
	match_tcp_flags_urg_unset
	match_tcp_flags_ack_unset
	match_tcp_flags_psh_unset
	match_tcp_flags_rst_unset
	match_tcp_flags_syn_unset
	match_tcp_flags_fin_set
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"ALLOW - IPV4 TCP FIN - \" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
	
	add_line "\t\taccept;";
}

#try_match_ipv4_tcp_reset (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SOURCE_MAC="$4", SOURCE_IP="$5", SOURCE_PORT="$6", DESTINATION_MAC="$7", DESTINATION_IP="$8", DESTINATION_PORT="$9", SERVICE_UID="$10");
try_match_ipv4_tcp_reset () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SOURCE_MAC="$4";
	SOURCE_IP="$5";
	SOURCE_PORT="$6";
	DESTINATION_MAC="$7";
	DESTINATION_IP="$8";
	DESTINATION_PORT="$9";
	SERVICE_UID="${10}";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; unrecognised direction.">&2;
			exit 2;
		;;
	esac

	if [ -z $INTERFACE_NAME ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "arp_reply_gratuitous from $SRC_MAC for $DST_NET; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "arp_reply_gratuitous from $SRC_MAC:$SRC_NET to $DST_MAC:$DST_NET; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SOURCE_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SOURCE_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SOURCE_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SOURCE_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SOURCE_PORT ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source port must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_port_is_valid.sh --port $SOURCE_PORT)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; source port is invalid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $DESTINATION_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DESTINATION_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DESTINATION_PORT ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination port must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_port_is_valid.sh --port $DESTINATION_PORT)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; destination port is invalid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SOURCE_MAC $DESTINATION_MAC
	
	signature_ipv4 $SOURCE_IP $DESTINATION_IP
	
	signature_protocol "6" $SOURCE_PORT $DESTINATION_PORT

	match_tcp_flags_cwr_unset
	match_tcp_flags_ece_unset
	match_tcp_flags_urg_unset
	match_tcp_flags_ack_unset
	match_tcp_flags_psh_unset
	match_tcp_flags_rst_set
	match_tcp_flags_syn_unset
	match_tcp_flags_fin_unset
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"ALLOW - IPV4 TCP RESET - \" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
	
	add_line "\t\taccept;";
}

#try_match_dhcp_discover (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", REQUESTED_ADDRESS="$5", NETWORK_MULTICAST="$6");
try_match_dhcp_discover () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	REQUESTED_ADDRESS="$5";
	NETWORK_MULTICAST="$6";
	
	OP_DESC_STR="dhcp_discover from $CLIENT_MAC for $REQUESTED_ADDRESS";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi

	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $REQUESTED_ADDRESS ]; then
		echo "$OP_DESC_STR; REQUESTED_ADDRESS must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $REQUESTED_ADDRESS)" = "false" ]; then
		echo "$OP_DESC_STR; REQUESTED_ADDRESS is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $NETWORK_MULTICAST ]; then
		echo "$OP_DESC_STR; NETWORK_MULTICAST must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $NETWORK_MULTICAST)" = "false" ]; then
		echo "$OP_DESC_STR; NETWORK_MULTICAST is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $IP4_NETWORK_BROADCAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER
	
	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";
	
	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made, this is a discover, so no time should have elapsed)";
	add_line "\t\t@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 1 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#Options (DHCP Options)";
	add_line "\t\t#DHCP Message Type of 1 (Discover)";

	add_line "\t\tlog prefix \"DHCP Discover Broadcast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
	
	add_line "";
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $NETWORK_MULTICAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER
	
	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made, this is a discover, so no time should have elapsed)";
	add_line "\t\t@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 1 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t#@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t#In the case of DHCPDISCOVER, 0.0.0.0";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#Options (DHCP Options)";
	add_line "\t\t#DHCP Message Type of 1 (Discover)";

	add_line "\t\tlog prefix \"DHCP Discover Multicast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dhcp_offer (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_ADDR="$5", CLIENT_MAC="$6", CLIENT_NET="$7");
try_match_dhcp_offer () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_ADDR="$5";
	CLIENT_MAC="$6";
	CLIENT_NET="$7";
	
	OP_DESC_STR="dhcp_offer from $SERVER_MAC:$SERVER_ADDR to $CLIENT_MAC for $CLIENT_ADDR";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi

	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_ADDR ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_ADDR)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_ADDR ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_ADDR)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_ADDR $CLIENT_ADDR
	
	signature_protocol "17" $PORT_DHCP_SERVER $PORT_DHCP_CLIENT
	
	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";
	
	add_line "\t\t#DHCP OP Code of 2 (BOOTREPLY)";
	add_line "\t\t@ih,0,8 0x02 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 0 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,8 $(echo $CLIENT_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,136,8 $(echo $CLIENT_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,144,8 $(echo $CLIENT_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,182,8 $(echo $CLIENT_ADDR | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,8 $(echo $SERVER_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,168,8 $(echo $SERVER_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,176,8 $(echo $SERVER_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,184,8 $(echo $SERVER_ADDR | cut -d '.' -f 4) \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";

	add_line "\t\t#DHCP Message Type of 2 (Offer)";
	
	add_line "\t\tlog prefix \"DHCP Offer\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dhcp_request (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", REQUESTED_ADDR="$5", SERVER_ADDR="$6", NET_MULTICAST="$7");
try_match_dhcp_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	REQUESTED_ADDR="$5";
	SERVER_ADDR="$6";
	NET_MULTICAST="$7";

	OP_DESC_STR="dhcp_request from $CLIENT_MAC to $SERVER_MAC for $CLIENT_ADDR"
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $REQUESTED_ADDR ]; then
		echo "$OP_DESC_STR; requested address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $REQUESTED_ADDR)" = "false" ]; then
		echo "$OP_DESC_STR; requested address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_ADDR ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_ADDR)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $NET_MULTICAST ]; then
		echo "$OP_DESC_STR; network multicast address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $NET_MULTICAST)" = "false" ]; then
		echo "$OP_DESC_STR; network multicast address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $IP4_NETWORK_BROADCAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER
	
	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 1 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,104,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,112,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,120,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,8 $(echo $SERVER_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,168,8 $(echo $SERVER_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,176,8 $(echo $SERVER_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,184,8 $(echo $SERVER_ADDR | cut -d '.' -f 4) \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";

	add_line "\t\t#DHCP OP Code of 3 (Request)";

	add_line "\t\tlog prefix \"DHCP Request Broadcast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
	
	add_line "";
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $NETWORK_MULTICAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER

	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 1 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,104,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,112,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,120,8 $(echo $REQUESTED_ADDR | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,8 $(echo $SERVER_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,168,8 $(echo $SERVER_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,176,8 $(echo $SERVER_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,184,8 $(echo $SERVER_ADDR | cut -d '.' -f 4) \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";

	add_line "\t\t#DHCP OP Code of 3 (Request)";

	add_line "\t\tlog prefix \"DHCP Request Multicast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dhcp_decline (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", NET_MULTICAST="$5");
try_match_dhcp_decline () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	DECLINED_ADDR="$5";
	NET_MULTICAST="$6";

	OP_DESC_STR="dhcp_decline from $CLIENT_MAC for $CLIENT_ADDR"

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi	

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $DECLINED_ADDR ]; then
		echo "$OP_DESC_STR; declined address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $DECLINED_ADDR)" = "false" ]; then
		echo "$OP_DESC_STR; declined address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $NET_MULTICAST ]; then
		echo "$OP_DESC_STR; network multicast address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $NET_MULTICAST)" = "false" ]; then
		echo "$OP_DESC_STR; network multicast address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $IP4_NETWORK_BROADCAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER

	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 0 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,8 $(echo $DECLINED_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,104,8 $(echo $DECLINED_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,112,8 $(echo $DECLINED_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,120,8 $(echo $DECLINED_ADDR | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";

	add_line "\t\t#DHCP Message Type of 4 (Decline)";

	add_line "\t\tlog prefix \"DHCP Decline Broadcast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
	
	add_line "";
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $MAC_BROADCAST
	
	signature_ipv4 $IPV4_NETWORK_EMPTY_ADDRESS $NETWORK_MULTICAST
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER	

	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";
	
	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 1 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,8 $(echo $DECLINED_ADDR | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,104,8 $(echo $DECLINED_ADDR | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,112,8 $(echo $DECLINED_ADDR | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,120,8 $(echo $DECLINED_ADDR | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#DHCP Message Type of 4 (Decline)";
	
	add_line "\t\tlog prefix \"DHCP Decline Multicast\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dhcp_ack (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", REQUESTED_IP="$7");
try_match_dhcp_ack () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	REQUESTED_IP="$7";

	OP_DESC_STR="dhcp_ack (permitted) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC for $REQUESTED_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi

	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $REQUESTED_IP ]; then
		echo "$OP_DESC_STR; requested address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $REQUESTED_IP)" = "false" ]; then
		echo "$OP_DESC_STR; requested address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $REQUESTED_IP
	
	signature_protocol "17" $PORT_DHCP_SERVER $PORT_DHCP_CLIENT

	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";
	
	add_line "\t\tDHCP OP Code of 2 (BOOTREPLY)";
	add_line "\t\t@ih,0,8 0x02 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 0 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,8 $(echo $REQUESTED_IP | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,136,8 $(echo $REQUESTED_IP | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,144,8 $(echo $REQUESTED_IP | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,152,8 $(echo $REQUESTED_IP | cut -d '.' -f 4) \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,8 $(echo $SERVER_IP | cut -d '.' -f 1) \\\\";
	add_line "\t\t@ih,168,8 $(echo $SERVER_IP | cut -d '.' -f 2) \\\\";
	add_line "\t\t@ih,176,8 $(echo $SERVER_IP | cut -d '.' -f 3) \\\\";
	add_line "\t\t@ih,184,8 $(echo $SERVER_IP | cut -d '.' -f 4) \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#DHCP Message Type of 5 (Acknowledge)";
	
	add_line "\t\tlog prefix \"DHCP Acknowledge\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dhcp_nak (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", REQUESTED_IP="$7");
try_match_dhcp_nak () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	REQUESTED_IP="$7";

	OP_DESC_STR="dhcp_nak (not permitted) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC for $REQUESTED_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi

	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $REQUESTED_IP ]; then
		echo "$OP_DESC_STR; requested address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $REQUESTED_IP)" = "false" ]; then
		echo "$OP_DESC_STR; requested address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_DHCP_SERVER $PORT_DHCP_CLIENT

	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\tDHCP OP Code of 2 (BOOTREPLY)";
	add_line "\t\t@ih,0,8 0x02 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 0 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#DHCP Message Type of 6 (Negative Acknowledge)";
	
	add_line "\t\tlog prefix \"DHCP Negative Acknowledge (NAK)\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";	

	add_line "\t\taccept;";
}

#try_match_dhcp_release (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7");
try_match_dhcp_release () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	
	OP_DESC_STR="dhcp_release (remove allocation) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi

	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_DHCP_CLIENT $PORT_DHCP_SERVER
	
	add_line "\t\tmeta skuid $DHCP_UID \\\\";
	
	add_line "\t\tudp length < 1500 \\\\";

	add_line "\t\t#DHCP OP Code of 1 (BOOTREQUEST)";
	add_line "\t\t@ih,0,8 0x01 \\\\";
	
	add_line "\t\t#HTYPE (Hardware Address Type) (1 Ethernet)";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#HLEN (Hardware Address Length) (6 Segment MAC)";
	add_line "\t\t@ih,16,8 6 \\\\";
	
	add_line "\t\t#HOPS (Client sets to 0, optionally set by relay-agents)";
	add_line "\t\t@ih,24,8 0 \\\\";
	
	add_line "\t\t#XID (Transaction ID, random number chosen by client; to associate client and server requests/responses)";
	add_line "\t\t@ih,32,32 != 0 \\\\";

	add_line "\t\t#SECS (Seconds since the request was made)";
	add_line "\t\t#@ih,64,16 0 \\\\";

	add_line "\t\t#Flags";
	add_line "\t\t#The broadcast bit";
	add_line "\t\t@ih,80,1 0 \\\\";
	
	add_line "\t\t#, followed by 15 zeroes. These must be zeroes as they are reserved for future use.":
	add_line "\t\t#These bits are ignored by servers and relay agents.";
	add_line "\t\t@ih,81,15 0 \\\\";
	
	add_line "\t\t#CIADDR (Client IP Address)";
	add_line "\t\t#Filled in by client in DHCPREQUEST if verifying previously allocated configuration parameters.";
	add_line "\t\t@ih,96,32 0 \\\\";
	
	add_line "\t\t#YIADDR (Your IP address) Your (client) IP address";
	add_line "\t\t@ih,128,32 0 \\\\";
	
	add_line "\t\t#SIADDR (Server IP address) Returned in DHCPOFFER, DHCPACK, DHCPNAK";
	add_line "\t\t@ih,160,32 0 \\\\";

	add_line "\t\t#GIADDR (Relay Agent IP address)";
	add_line "\t\t@ih,192,32 0 \\\\";

	add_line "\t\t#CHADDR (Client Hardware Address)";
	add_line "\t\t#In the case of ethernet, zero. Can be used for things such as Bluetooth.";
	add_line "\t\t#@ih,224,64 0 \\\\";
	
	add_line "\t\t#SNAME (Server name) optional server host name, null terminated string.";
	add_line "\t\t@ih,288,512 0 \\\\";
	
	add_line "\t\t#File (Boot file name), null terminated string.";
	add_line "\t\t#\"generic\" name, or null in DHCPDISCOVER";
	add_line "\t\t#Fully-qualified name in DHCPOFFER";
	add_line "\t\t#@ih,800,1024 0 \\\\";
	
	add_line "\t\t#DHCP Message Type of 7 (Release)";

	add_line "\t\tlog prefix \"DHCP Release\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";

	add_line "\t\taccept;";
}

#try_match_dns_udp_query (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_dns_udp_query () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";
	
	OP_DESC_STR="try_match_dns_udp_query from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_PORT ]; then
		echo "$OP_DESC_STR; client port must be provided.";
	fi
	
	if [ "$(./check_port_is_valid.sh --port $CLIENT_PORT)" = "false" ]; then
		echo "$OP_DESC_STR; client port is not valid">&2;
		exit 2;
	fi

	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_PORT ]; then
		echo "$OP_DESC_STR; server port must be provided.";
	fi
	
	if [ "$(./check_port_is_valid.sh --port $SERVER_PORT)" = "false" ]; then
		echo "$OP_DESC_STR; server port is not valid">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_EPHEMERAL $PORT_DNS_SERVER
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#ID";
	add_line "\t\t@ih,0,16 != 0 \\\\";
	
	add_line "\t\t#Query (0) or Response (1)";
	add_line "\t\t@ih,16,1 0 \\\\";
	
	add_line "\t\t#OPCODE";
	add_line "\t\t@ih,17,4 > -1\\\\";
	add_line "\t\t@ih,17,4 < 3\\\\";
	
	add_line "\t\t#Authoritative Answer";
	add_line "\t\t@ih,21,1 0 \\\\";
	
	add_line "\t\t#Truncation";
	add_line "\t\t#@ih,22,1 - \\\\";
	
	add_line "\t\t#Recursion Desired";
	add_line "\t\t#@ih,23,1 - \\\\";
	
	add_line "\t\t#Recursion Available";
	add_line "\t\t#@ih,24,1 - \\\\";
	
	add_line "\t\t#Reserved bits (0's)";
	add_line "\t\t@ih,25,3 0 \\\\";
	
	add_line "\t\t#Response Code";
	add_line "\t\t@ih,28,4 0 \\\\";
	
	add_line "\t\t#Queried Domain Count";
	add_line "\t\t@ih,32,16 > 0 \\\\";
	
	add_line "\t\t#Answer Count";
	add_line "\t\t@ih,48,16 0 \\\\";
	
	add_line "\t\t#Name Server Count";
	add_line "\t\t@ih,64,16 > -1 \\\\";
	
	add_line "\t\t#Additional Record Count";
	add_line "\t\t@ih,80,16 > -1 \\\\";
	
	add_line "\t\tlog prefix \"IPV4 UDP $DIR $INTERFACE_NAME from $CLIENT_MAC:$CLIENT_IP[$CLIENT_PORT] to $SERVER_MAC:$SERVER_IP[$SERVER_PORT] DNS Request - \" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_dns_udp_reply(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_dns_udp_reply () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";
	
	OP_DESC_STR="dns_udp_reply from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_PORT ]; then
		echo "$OP_DESC_STR; server port must be provided.";
	fi
	
	if [ "$(./check_port_is_valid.sh --port $SERVER_PORT)" = "false" ]; then
		echo "$OP_DESC_STR; server port is not valid">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_PORT ]; then
		echo "$OP_DESC_STR; client port must be provided.";
	fi
	
	if [ "$(./check_port_is_valid.sh --port $CLIENT_PORT)" = "false" ]; then
		echo "$OP_DESC_STR; client port is not valid">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_DNS_SERVER $PORT_EPHEMERAL	

	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#ID";
	add_line "\t\t@ih,0,16 != 0 \\\\";
	
	add_line "\t\t#Query (0) or Response (1)";
	add_line "\t\t@ih,16,1 1 \\\\";
	
	add_line "\t\t#OPCODE";
	add_line "\t\t@ih,17,4 > -1\\\\";
	add_line "\t\t@ih,17,4 < 3\\\\";
	
	add_line "\t\t#Authoritative Answer";
	add_line "\t\t#@ih,21,1 - \\\\";
	
	add_line "\t\t#Truncation";
	add_line "\t\t#@ih,22,1 - \\\\";
	
	add_line "\t\t#Recursion Desired";
	add_line "\t\t#@ih,23,1 - \\\\";
	
	add_line "\t\t#Recursion Available";
	add_line "\t\t#@ih,24,1 - \\\\";
	
	add_line "\t\t#Reserved bits (0's)";
	add_line "\t\t@ih,25,3 0 \\\\";
	
	add_line "\t\t#Response Code";
	add_line "\t\t@ih,28,4 > -1 \\\\";
	add_line "\t\t@ih,28,4 < 6 \\\\";
	
	add_line "\t\t#Queried Domain Count";
	add_line "\t\t@ih,32,16 > 0 \\\\";
	
	add_line "\t\t#Answer Count";
	add_line "\t\t@ih,48,16 > -1 \\\\";
	
	add_line "\t\t#Name Server Count";
	add_line "\t\t@ih,64,16 > -1 \\\\";
	
	add_line "\t\t#Additional Record Count";
	add_line "\t\t@ih,80,16 > -1 \\\\";
	
	add_line "\t\tlog prefix \"IPV4 UDP $DIR $INTERFACE_NAME from $SERVER_MAC:$SERVER_IP[$SERVER_PORT] to $CLIENT_MAC:$CLIENT_IP[$CLIENT_PORT] DNS Reply - \" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_ntp_udp_kiss_of_death (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_ntp_udp_kiss_of_death () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";
	
	OP_DESC_STR="ntp_udp_kiss_of_death (control message) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_NTP_SERVER $PORT_NTP_CLIENT
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#Leap Indicator - 0 - no leap, 1 - Todays' last minute has 61secs, 2 - Todays' last minute has 59secs, 3 - Leap unknown! (Clock unsynchronised)";
	add_line "\t\t#@ih,0,2 0 \\\\";
	
	add_line "\t\t#NTP Version 4";
	add_line "\t\t@ih,2,3 4 \\\\";
	
	add_line "\t\t#NTP Mode 0 - reserved, 1 - symmetric active, 2 - symmetric passive, 3 - client, 4 - server, 5 - broadcast, 6 - NTP control channel";
	add_line "\t\t@ih,5,3 6 \\\\";
	
	add_line "\t\t#NTP Stratum 0 (Kiss Of Death packet)";
	add_line "\t\t@ih,8,8 0 \\\\";
	
	add_line "\t\t#NTP Poll (Lower than 5 may be abusive, higher than 10 may be too slow):";
	add_line "\t\t#1: 	 2sec";
	add_line "\t\t#2: 	 4sec";
	add_line "\t\t#3: 	 8sec";
	add_line "\t\t#4: 	 16sec";
	add_line "\t\t#5: 	 32sec";
	add_line "\t\t#6: 	 64sec";
	add_line "\t\t#7: 	 128sec or ~2mins";
	add_line "\t\t#8: 	 256sec or ~4mins";
	add_line "\t\t#9: 	 512sec or ~8.5mins";
	add_line "\t\t#10: 	 1024sec or ~17mins";
	add_line "\t\t#@ih,16,8 > 5 \\\\";
	add_line "\t\t#@ih,16,8 < 11 \\\\";
	
	add_line "\t\t#NTP Precision (Suggested -1 to -16):";
	add_line "\t\t#-1: 	 500.000000ms";
	add_line "\t\t#-2: 	 250.000000ms";
	add_line "\t\t#-3: 	 125.000000ms";
	add_line "\t\t#-4: 	 62.500000ms";
	add_line "\t\t#-5: 	 31.250000ms";
	add_line "\t\t#-6: 	 15.625000ms";
	add_line "\t\t#-7: 	 7.8125000ms";
	add_line "\t\t#-8: 	 3.9062500ms";
	add_line "\t\t#-9: 	 1.9531250ms";
	add_line "\t\t#-10:	 0.9765625ms";
	add_line "\t\t#-11:	 0.4882813ms";
	add_line "\t\t#-12:	 0.2441406ms";
	add_line "\t\t#-13:	 0.1220703ms";
	add_line "\t\t#-14:	 0.0610352ms";
	add_line "\t\t#-15:	 0.0305176ms";
	add_line "\t\t#-16:	 0.0152588ms";
	add_line "\t\t#-17:	 0.0076294ms";
	add_line "\t\t#-18:	 0.0038147ms";
	add_line "\t\t#-19:	 0.0019073ms";
	add_line "\t\t#-20:	 0.0009536ms";
	add_line "\t\t#@ih,24,8 < -8 \\\\";
	add_line "\t\t#@ih,24,8 > -20 \\\\";
	
	add_line "\t\t#NTP Root Delay";
	add_line "\t\t#@ih,32,32 - \\\\";
	
	add_line "\t\t#NTP Root Dispersion";
	add_line "\t\t#@ih,64,32 - \\\\";
	
	add_line "\t\tNTP Reference ID";
	REFERENCE_ID_SET="1145392729,"; #DENY
	REFERENCE_ID_SET="$REFERENCE_ID_SET 1381192786,"; #RSTR
	REFERENCE_ID_SET="$REFERENCE_ID_SET 1380013125,"; #RATE
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1094931284,"; #ACST
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1096111176,"; #AUTH
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1096111183,"; #AUTO
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1111708500,"; #BCST
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1129470288,"; #CRYP
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1146244944,"; #DROP
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1229867348,"; #INIT
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1296257876,"; #MCST
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1313555801,"; #NKEY
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1380798292,"; #RMOT
	#REFERENCE_ID_SET="$REFERENCE_ID_SET 1398031696"; #STEP
	add_line "\t\t@ih,96,32 { $REFERENCE_ID_SET } \\\\";
	
	#add_line "\t\tNTP Reference ID X code (experimental)";
	#add_line "\t\t#@ih,96,8 88";
	
	add_line "\t\t#NTP Reference Timestamp";
	add_line "\t\t#@ih,128,64  \\\\";
	
	add_line "\t\t#NTP Origin Timestamp";
	add_line "\t\t#@ih,192,64  \\\\";
	
	add_line "\t\t#NTP Receive Timestamp";
	add_line "\t\t#@ih,256,64  \\\\";
	
	add_line "\t\t#NTP Transmit Timestamp";
	add_line "\t\t#@ih,320,64  \\\\";
	
	add_line "\t\tlog prefix \"$DIR $INTERFACE_NAME from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP - NTP Kiss Of Death (control message)\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_ntp_udp_stratum_1_request (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_ntp_udp_stratum_1_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OP_DESC_STR="ntp_udp_stratum_1 (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_EPHEMERAL $PORT_NTP_SERVER	

	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#Leap Indicator - 0 - no leap, 1 - Todays' last minute has 61secs, 2 - Todays' last minute has 59secs, 3 - Leap unknown! (Clock unsynchronised)";
	add_line "\t\t#@ih,0,2 0 \\\\";
	
	add_line "\t\t#NTP Version 4";
	add_line "\t\t@ih,2,3 4 \\\\";
	
	add_line "\t\t#NTP Mode 0 - reserved, 1 - symmetric active, 2 - symmetric passive, 3 - client, 4 - server, 5 - broadcast, 6 - NTP control channel";
	add_line "\t\t#@ih,5,3 3 \\\\";
	
	add_line "\t\t#NTP Stratum 1";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#NTP Poll (Lower than 5 may be abusive, higher than 10 may be too slow):";
	add_line "\t\t#1: 	 2sec";
	add_line "\t\t#2: 	 4sec";
	add_line "\t\t#3: 	 8sec";
	add_line "\t\t#4: 	 16sec";
	add_line "\t\t#5: 	 32sec";
	add_line "\t\t#6: 	 64sec";
	add_line "\t\t#7: 	 128sec or ~2mins";
	add_line "\t\t#8: 	 256sec or ~4mins";
	add_line "\t\t#9: 	 512sec or ~8.5mins";
	add_line "\t\t#10: 	 1024sec or ~17mins";
	add_line "\t\t@ih,16,8 > 5 \\\\";
	add_line "\t\t@ih,16,8 < 11 \\\\";
	
	add_line "\t\t#NTP Precision (Suggested -1 to -16):";
	add_line "\t\t#-1: 	 500.000000ms";
	add_line "\t\t#-2: 	 250.000000ms";
	add_line "\t\t#-3: 	 125.000000ms";
	add_line "\t\t#-4: 	 62.500000ms";
	add_line "\t\t#-5: 	 31.250000ms";
	add_line "\t\t#-6: 	 15.625000ms";
	add_line "\t\t#-7: 	 7.8125000ms";
	add_line "\t\t#-8: 	 3.9062500ms";
	add_line "\t\t#-9: 	 1.9531250ms";
	add_line "\t\t#-10:	 0.9765625ms";
	add_line "\t\t#-11:	 0.4882813ms";
	add_line "\t\t#-12:	 0.2441406ms";
	add_line "\t\t#-13:	 0.1220703ms";
	add_line "\t\t#-14:	 0.0610352ms";
	add_line "\t\t#-15:	 0.0305176ms";
	add_line "\t\t#-16:	 0.0152588ms";
	add_line "\t\t@ih,24,8 < -1  \\\\";
	add_line "\t\t@ih,24,8 > -16  \\\\";
	
	add_line "\t\t#NTP Root Delay";
	add_line "\t\t#@ih,32,32 - \\\\";
	
	add_line "\t\t#NTP Root Dispersion";
	add_line "\t\t#@ih,64,32 - \\\\";
	
	add_line "\t\t#NTP Reference ID";
	REFERENCE_ID_SET="1196377427,"; 				#GOES - Geosynchronous Orbit Environment Satellite
	REFERENCE_ID_SET="$REFERENCE_ID_SET 4673619,";  		#GPS - Global Positioning System
	REFERENCE_ID_SET="$REFERENCE_ID_SET 5263443,"; 			#PPS - Generic pulse-per-second
	REFERENCE_ID_SET="$REFERENCE_ID_SET 4474445,"; 			#DFM - UTC(DFM)
	if [ $NTP_ENABLE_RARE_CLOCKS = "true" ]; then
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4669772,"; 		#GAL - Galileo Positioning System
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1230129479,"; 	#IRIG - Inter-Range Instrumentation Group
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1465341506,"; 	#WWVB - LF Radio WWVB Ft. Collins, CO 60kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4473670,"; 		#DCF - LF Radio DCF77 Mainflingen, DE 77.5kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4735559,"; 		#HBG - LF Radio HBG Prangins, HB 75kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5067590,"; 		#MSF - LF Radio MSF Anthorn, UK 60kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4868697,"; 		#JJY - LF Radio JJY Fukushima, JP 40kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1280266819,";	#LORC - MF Radio LORAN C Station, 100kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5522502,"; 		#TDF - MF Radio Allouis, FR 162kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4409429,"; 		#CHU - HF Radio CHU Ottawa, Ontario
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5723990,"; 		#WWV - HF Radio WWV Ft. Collins, CO
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1465341512,"; 	#WWVH - HF Radio WWVH Kauai, HI
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1313428308,"; 	#NIST - NIST Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1094931539,"; 	#ACTS - NIST Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1431522895,"; 	#USNO - USNO Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5264450"; 		#PTB - European Telephone modem
	fi
	add_line "\t\t@ih,98,32 { $REFERENCE_ID_SET } \\\\";\
	
	add_line "\t\t#NTP Reference Timestamp";
	add_line "\t\t#@ih,128,64  \\\\";
	
	add_line "\t\t#NTP Origin Timestamp";
	add_line "\t\t#@ih,192,64  \\\\";
	
	add_line "\t\t#NTP Receive Timestamp";
	add_line "\t\t#@ih,256,64  \\\\";
	
	add_line "\t\t#NTP Transmit Timestamp";
	add_line "\t\t#@ih,320,64  \\\\";
	
	add_line "\t\tlog prefix \"$DIR $INTERFACE_NAME from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP - NTP Server\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_ntp_udp_stratum_1_response (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_ntp_udp_stratum_1_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OP_DESC_STR="ntp_udp_stratum_1_response (server update) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_NTP_SERVER $PORT_EPHEMERAL	

	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#Leap Indicator - 0 - no leap, 1 - Todays' last minute has 61secs, 2 - Todays' last minute has 59secs, 3 - Leap unknown! (Clock unsynchronised)";
	add_line "\t\t#@ih,0,2 0 \\\\";
	
	add_line "\t\t#NTP Version 4";
	add_line "\t\t@ih,2,3 4 \\\\";
	
	add_line "\t\t#NTP Mode 0 - reserved, 1 - symmetric active, 2 - symmetric passive, 3 - client, 4 - server, 5 - broadcast, 6 - NTP control channel";
	add_line "\t\t#@ih,5,3 4 \\\\";
	
	add_line "\t\t#NTP Stratum 1";
	add_line "\t\t@ih,8,8 1 \\\\";
	
	add_line "\t\t#NTP Poll (Lower than 5 may be abusive, higher than 10 may be too slow):";
	add_line "\t\t#1: 	 2sec";
	add_line "\t\t#2: 	 4sec";
	add_line "\t\t#3: 	 8sec";
	add_line "\t\t#4: 	 16sec";
	add_line "\t\t#5: 	 32sec";
	add_line "\t\t#6: 	 64sec";
	add_line "\t\t#7: 	 128sec or ~2mins";
	add_line "\t\t#8: 	 256sec or ~4mins";
	add_line "\t\t#9: 	 512sec or ~8.5mins";
	add_line "\t\t#10: 	 1024sec or ~17mins";
	add_line "\t\t@ih,16,8 > 5 \\\\";
	add_line "\t\t@ih,16,8 < 11 \\\\";
	
	add_line "\t\t#NTP Precision (Suggested -1 to -16):";
	add_line "\t\t#-1: 	 500.000000ms";
	add_line "\t\t#-2: 	 250.000000ms";
	add_line "\t\t#-3: 	 125.000000ms";
	add_line "\t\t#-4: 	 62.500000ms";
	add_line "\t\t#-5: 	 31.250000ms";
	add_line "\t\t#-6: 	 15.625000ms";
	add_line "\t\t#-7: 	 7.8125000ms";
	add_line "\t\t#-8: 	 3.9062500ms";
	add_line "\t\t#-9: 	 1.9531250ms";
	add_line "\t\t#-10:	 0.9765625ms";
	add_line "\t\t#-11:	 0.4882813ms";
	add_line "\t\t#-12:	 0.2441406ms";
	add_line "\t\t#-13:	 0.1220703ms";
	add_line "\t\t#-14:	 0.0610352ms";
	add_line "\t\t#-15:	 0.0305176ms";
	add_line "\t\t#-16:	 0.0152588ms";
	add_line "\t\t@ih,24,8 < -1  \\\\";
	add_line "\t\t@ih,24,8 > -16  \\\\";
	
	add_line "\t\t#NTP Root Delay";
	add_line "\t\t#@ih,32,32 - \\\\";
	
	add_line "\t\t#NTP Root Dispersion";
	add_line "\t\t#@ih,64,32 - \\\\";
	
	add_line "\t\t#NTP Reference ID";
	REFERENCE_ID_SET="1196377427,"; 				#GOES - Geosynchronous Orbit Environment Satellite
	REFERENCE_ID_SET="$REFERENCE_ID_SET 4673619,";  		#GPS - Global Positioning System
	REFERENCE_ID_SET="$REFERENCE_ID_SET 5263443,"; 			#PPS - Generic pulse-per-second
	REFERENCE_ID_SET="$REFERENCE_ID_SET 4474445,"; 			#DFM - UTC(DFM)
	if [ $NTP_ENABLE_RARE_CLOCKS = "true" ]; then
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4669772,"; 		#GAL - Galileo Positioning System
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1230129479,"; 	#IRIG - Inter-Range Instrumentation Group
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1465341506,"; 	#WWVB - LF Radio WWVB Ft. Collins, CO 60kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4473670,"; 		#DCF - LF Radio DCF77 Mainflingen, DE 77.5kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4735559,"; 		#HBG - LF Radio HBG Prangins, HB 75kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5067590,"; 		#MSF - LF Radio MSF Anthorn, UK 60kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4868697,"; 		#JJY - LF Radio JJY Fukushima, JP 40kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1280266819,";	#LORC - MF Radio LORAN C Station, 100kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5522502,"; 		#TDF - MF Radio Allouis, FR 162kHz
		REFERENCE_ID_SET="$REFERENCE_ID_SET 4409429,"; 		#CHU - HF Radio CHU Ottawa, Ontario
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5723990,"; 		#WWV - HF Radio WWV Ft. Collins, CO
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1465341512,"; 	#WWVH - HF Radio WWVH Kauai, HI
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1313428308,"; 	#NIST - NIST Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1094931539,"; 	#ACTS - NIST Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 1431522895,"; 	#USNO - USNO Telephone modem
		REFERENCE_ID_SET="$REFERENCE_ID_SET 5264450"; 		#PTB - European Telephone modem
	fi
	add_line "\t\t@ih,98,32 { $REFERENCE_ID_SET } \\\\";\
	
	add_line "\t\t#NTP Reference Timestamp";
	add_line "\t\t#@ih,128,64  \\\\";
	
	add_line "\t\t#NTP Origin Timestamp";
	add_line "\t\t#@ih,192,64  \\\\";
	
	add_line "\t\t#NTP Receive Timestamp";
	add_line "\t\t#@ih,256,64  \\\\";
	
	add_line "\t\t#NTP Transmit Timestamp";
	add_line "\t\t#@ih,320,64  \\\\";
	
	add_line "\t\tlog prefix \"$DIR $INTERFACE_NAME from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP - NTP Server\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_ntp_udp_stratum_2_or_greater_request (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", REFERENCE_IP="$8"|"", SERVICE_UID="$9");
try_match_ntp_udp_stratum_2_or_greater_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	REFERENCE_IP="$8";
	SERVICE_UID="$9";
	
	OP_DESC_STR="ntp_udp_stratum_2_or_greater_query (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi
	
	if [ -n $REFERENCE_IP ]; then
		if [ "$(./check_ipv4_address_is_valid.sh --address $REFERENCE_IP)" = "false" ]; then
			echo "$OP_DESC_STR; reference address is not valid.">&2;
			exit 2;
		fi
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_NTP_CLIENT $PORT_NTP_SERVER
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#Leap Indicator - 0 - no leap, 1 - Todays' last minute has 61secs, 2 - Todays' last minute has 59secs, 3 - Leap unknown! (Clock unsynchronised)";
	add_line "\t\t#@ih,0,2 0 \\\\";
	
	add_line "\t\t#NTP Version 4";
	add_line "\t\t@ih,2,3 4 \\\\";
	
	add_line "\t\t#NTP Mode 0 - reserved, 1 - symmetric active, 2 - symmetric passive, 3 - client, 4 - server, 5 - broadcast, 6 - NTP control channel";
	add_line "\t\t@ih,5,3 3 \\\\"; 
	
	add_line "\t\t#NTP Stratum from 2 to 16";
	add_line "\t\t@ih,8,8 > 1 \\\\";
	add_line "\t\t@ih,8,8 < 17 \\\\";
	
	add_line "\t\t#NTP Poll (Lower than 5 may be abusive, higher than 10 may be too slow):";
	add_line "\t\t#1: 	 2sec";
	add_line "\t\t#2: 	 4sec";
	add_line "\t\t#3: 	 8sec";
	add_line "\t\t#4: 	 16sec";
	add_line "\t\t#5: 	 32sec";
	add_line "\t\t#6: 	 64sec";
	add_line "\t\t#7: 	 128sec or ~2mins";
	add_line "\t\t#8: 	 256sec or ~4mins";
	add_line "\t\t#9: 	 512sec or ~8.5mins";
	add_line "\t\t#10: 	 1024sec or ~17mins";
	add_line "\t\t@ih,16,8 > 5 \\\\";
	add_line "\t\t@ih,16,8 < 11 \\\\";
	
	add_line "\t\t#NTP Precision (Suggested -1 to -16):";
	add_line "\t\t#-1: 	 500.000000ms";
	add_line "\t\t#-2: 	 250.000000ms";
	add_line "\t\t#-3: 	 125.000000ms";
	add_line "\t\t#-4: 	 62.500000ms";
	add_line "\t\t#-5: 	 31.250000ms";
	add_line "\t\t#-6: 	 15.625000ms";
	add_line "\t\t#-7: 	 7.8125000ms";
	add_line "\t\t#-8: 	 3.9062500ms";
	add_line "\t\t#-9: 	 1.9531250ms";
	add_line "\t\t#-10:	 0.9765625ms";
	add_line "\t\t#-11:	 0.4882813ms";
	add_line "\t\t#-12:	 0.2441406ms";
	add_line "\t\t#-13:	 0.1220703ms";
	add_line "\t\t#-14:	 0.0610352ms";
	add_line "\t\t#-15:	 0.0305176ms";
	add_line "\t\t#-16:	 0.0152588ms";
	add_line "\t\t@ih,24,8 < -1  \\\\";
	add_line "\t\t@ih,24,8 > -16  \\\\";
	
	add_line "\t\t#NTP Root Delay";
	add_line "\t\t#@ih,32,32 - \\\\";
	
	add_line "\t\t#NTP Root Dispersion";
	add_line "\t\t#@ih,64,32 - \\\\";
	
	add_line "\t\t#NTP Reference ID";
	if [ -n $REFERENCE_IP ]; then
		add_line "\t\t@ih,96,8 $(echo $REFERENCE_IP | cut -d '.' -f 1) \\\\";
		add_line "\t\t@ih,104,8 $(echo $REFERENCE_IP | cut -d '.' -f 2) \\\\";
		add_line "\t\t@ih,112,8 $(echo $REFERENCE_IP | cut -d '.' -f 3) \\\\";
		add_line "\t\t@ih,120,8 $(echo $REFERENCE_IP | cut -d '.' -f 4) \\\\";
	fi
	
	add_line "\t\tNTP Reference Timestamp";
	add_line "\t\t@ih,128,64  \\\\";
	
	add_line "\t\tNTP Origin Timestamp";
	add_line "\t\t@ih,192,64  \\\\";
	
	add_line "\t\tNTP Receive Timestamp";
	add_line "\t\t@ih,256,64  \\\\";
	
	add_line "\t\tNTP Transmit Timestamp";
	add_line "\t\t@ih,320,64  \\\\";
	
	add_line "\t\tlog prefix \"$DIR $INTERFACE_NAME from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP - NTP Client request\" \\\\";	

	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_ntp_udp_stratum_2_or_greater_response (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", REFERENCE_IP="$8"|"", SERVICE_UID="$9");
try_match_ntp_udp_stratum_2_or_greater_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	REFERENCE_IP="$8";
	SERVICE_UID="$9";
	
	OP_DESC_STR="ntp_udp_stratum_2_or_greater_query (server response) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OP_DESC_STR; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OP_DESC_STR; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OP_DESC_STR; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OP_DESC_STR; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OP_DESC_STR; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OP_DESC_STR; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OP_DESC_STR; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OP_DESC_STR; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OP_DESC_STR; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OP_DESC_STR; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OP_DESC_STR; client address is not valid.">&2;
		exit 2;
	fi
	
	if [ -n $REFERENCE_IP ]; then
		if [ "$(./check_ipv4_address_is_valid.sh --address $REFERENCE_IP)" = "false" ]; then
			echo "$OP_DESC_STR; reference address is not valid.">&2;
			exit 2;
		fi
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_NTP_SERVER $PORT_NTP_CLIENT
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\t#Leap Indicator - 0 - no leap, 1 - Todays' last minute has 61secs, 2 - Todays' last minute has 59secs, 3 - Leap unknown! (Clock unsynchronised)";
	add_line "\t\t#@ih,0,2 0 \\\\";
	
	add_line "\t\t#NTP Version 4";
	add_line "\t\t@ih,2,3 4 \\\\";
	
	add_line "\t\t#NTP Mode 0 - reserved, 1 - symmetric active, 2 - symmetric passive, 3 - client, 4 - server, 5 - broadcast, 6 - NTP control channel";
	add_line "\t\t@ih,5,3 4 \\\\"; 
	
	add_line "\t\t#NTP Stratum from 2 to 16";
	add_line "\t\t@ih,8,8 > 1 \\\\";
	add_line "\t\t@ih,8,8 < 17 \\\\";
	
	add_line "\t\t#NTP Poll (Lower than 5 may be abusive, higher than 10 may be too slow):";
	add_line "\t\t#1: 	 2sec";
	add_line "\t\t#2: 	 4sec";
	add_line "\t\t#3: 	 8sec";
	add_line "\t\t#4: 	 16sec";
	add_line "\t\t#5: 	 32sec";
	add_line "\t\t#6: 	 64sec";
	add_line "\t\t#7: 	 128sec or ~2mins";
	add_line "\t\t#8: 	 256sec or ~4mins";
	add_line "\t\t#9: 	 512sec or ~8.5mins";
	add_line "\t\t#10: 	 1024sec or ~17mins";
	add_line "\t\t@ih,16,8 > 5 \\\\";
	add_line "\t\t@ih,16,8 < 11 \\\\";
	
	add_line "\t\t#NTP Precision (Suggested -1 to -16):";
	add_line "\t\t#-1: 	 500.000000ms";
	add_line "\t\t#-2: 	 250.000000ms";
	add_line "\t\t#-3: 	 125.000000ms";
	add_line "\t\t#-4: 	 62.500000ms";
	add_line "\t\t#-5: 	 31.250000ms";
	add_line "\t\t#-6: 	 15.625000ms";
	add_line "\t\t#-7: 	 7.8125000ms";
	add_line "\t\t#-8: 	 3.9062500ms";
	add_line "\t\t#-9: 	 1.9531250ms";
	add_line "\t\t#-10:	 0.9765625ms";
	add_line "\t\t#-11:	 0.4882813ms";
	add_line "\t\t#-12:	 0.2441406ms";
	add_line "\t\t#-13:	 0.1220703ms";
	add_line "\t\t#-14:	 0.0610352ms";
	add_line "\t\t#-15:	 0.0305176ms";
	add_line "\t\t#-16:	 0.0152588ms";
	add_line "\t\t@ih,24,8 < -1  \\\\";
	add_line "\t\t@ih,24,8 > -16  \\\\";
	
	add_line "\t\t#NTP Root Delay";
	add_line "\t\t#@ih,32,32 - \\\\";
	
	add_line "\t\t#NTP Root Dispersion";
	add_line "\t\t#@ih,64,32 - \\\\";
	
	add_line "\t\t#NTP Reference ID";
	if [ -n $REFERENCE_IP ]; then
		add_line "\t\t@ih,96,8 $(echo $REFERENCE_IP | cut -d '.' -f 1) \\\\";
		add_line "\t\t@ih,104,8 $(echo $REFERENCE_IP | cut -d '.' -f 2) \\\\";
		add_line "\t\t@ih,112,8 $(echo $REFERENCE_IP | cut -d '.' -f 3) \\\\";
		add_line "\t\t@ih,120,8 $(echo $REFERENCE_IP | cut -d '.' -f 4) \\\\";
	fi
	
	add_line "\t\tNTP Reference Timestamp";
	add_line "\t\t@ih,128,64  \\\\";
	
	add_line "\t\tNTP Origin Timestamp";
	add_line "\t\t@ih,192,64  \\\\";
	
	add_line "\t\tNTP Receive Timestamp";
	add_line "\t\t@ih,256,64  \\\\";
	
	add_line "\t\tNTP Transmit Timestamp";
	add_line "\t\t@ih,320,64  \\\\";
	
	add_line "\t\tlog prefix \"$DIR $INTERFACE_NAME from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP - NTP Server response\" \\\\";	

	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_sdns_tcp_query (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_sdns_tcp_query () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="DNS over TLS (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "6" $PORT_SDNS_CLIENT $PORT_SDNS_SERVER

	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi

	match_tcp_flags_syn_set
	
	add_line "\t\tct state new \\\\";
	
	add_line "\t\tlog prefix \"SDNS TCP\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_sdns_tcp_response (DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_sdns_tcp_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="DNS over TLS (server response) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi
	
	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "6" $PORT_SDNS_CLIENT $PORT_SDNS_SERVER

	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi

	match_tcp_flags_ack_set
	
	add_line "\t\tct state established \\\\";
	
	add_line "\t\tlog prefix \"SDNS TCP\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_http_tcp_request(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_http_tcp_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="TCP HTTP (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";
	
	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "6" $PORT_EPHEMERAL $PORT_HTTP_SERVER

	match_tcp_flags_syn_set
	
	add_line "\t\tct state new \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"TCP HTTP request\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_http_tcp_response(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_http_tcp_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="TCP HTTP (server response) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "6" $PORT_HTTP_SERVER $PORT_EPHEMERAL

	match_tcp_flags_ack_set
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"TCP HTTP response\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_http_udp_request(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_http_udp_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="UDP HTTP (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_EPHEMERAL $PORT_HTTP_SERVER

	match_tcp_flags_syn_set
	
	add_line "\t\tct state new \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"UDP HTTP request\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_http_udp_response(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_http_udp_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="UDP HTTP (server response) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_HTTP_SERVER $PORT_EPHEMERAL
	
	match_tcp_flags_ack_set
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"UDP HTTP response\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_https_tcp_request(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_https_tcp_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="TCP HTTPS (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "6" $PORT_EPHEMERAL $PORT_HTTPS_SERVER

	match_tcp_flags_syn_set
	
	add_line "\t\tct state new \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"TCP HTTPS request\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_https_tcp_response(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_https_tcp_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="TCP HTTPS (server response) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "6" $PORT_HTTPS_SERVER $PORT_EPHEMERAL

	match_tcp_flags_ack_set
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"TCP HTTPS response\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_https_udp_request(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", CLIENT_MAC="$4", CLIENT_IP="$5", SERVER_MAC="$6", SERVER_IP="$7", SERVICE_UID="$8");
try_match_https_udp_request () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	CLIENT_MAC="$4";
	CLIENT_IP="$5";
	SERVER_MAC="$6";
	SERVER_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="UDP HTTPS (client request) from $CLIENT_MAC:$CLIENT_IP to $SERVER_MAC:$SERVER_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $CLIENT_MAC $SERVER_MAC
	
	signature_ipv4 $CLIENT_IP $SERVER_IP
	
	signature_protocol "17" $PORT_EPHEMERAL $PORT_HTTPS_SERVER

	match_tcp_flags_syn_set
	
	add_line "\t\tct state new \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"UDP HTTPS request\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}

#try_match_https_udp_response(DIR="$1", INTERFACE_NAME="$2", VLAN_ID_DOT1Q="$3", SERVER_MAC="$4", SERVER_IP="$5", CLIENT_MAC="$6", CLIENT_IP="$7", SERVICE_UID="$8");
try_match_https_udp_response () {
	DIR="$1";
	INTERFACE_NAME="$2";
	VLAN_ID_DOT1Q="$3";
	SERVER_MAC="$4";
	SERVER_IP="$5";
	CLIENT_MAC="$6";
	CLIENT_IP="$7";
	SERVICE_UID="$8";

	OPERATION_DESCRIPTION_STRING="UDP HTTPS (server response) from $SERVER_MAC:$SERVER_IP to $CLIENT_MAC:$CLIENT_IP";

	case $DIR in
		"IN") ;;
		"OUT") ;;
		*)
			echo "$OPERATION_DESCRIPTION_STRING; unrecognised direction.">&2;
			exit 2;
		;;
	esac
	
	if [ -z $INTERFACE_NAME ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_interface_exists_by_name.sh --name $INTERFACE_NAME)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; interface $INTERFACE_NAME does not exist.">&2;
		exit 2;
	fi
	
	if [ -n $VLAN_ID_DOT1Q ]; then
		if [ "$(./check_vlan_id_is_valid.sh --id $VLAN_ID_DOT1Q)" = "false" ]; then
			echo "$OPERATION_DESCRIPTION_STRING; VLAN ID is invalid.">&2;
			exit 2;
		fi
	fi
	
	if [ -z $SERVER_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $SERVER_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $SERVER_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $SERVER_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; server address is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_MAC ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC must be provided.">&2;
		exit 2;
	fi

	if [ "$(./check_mac_address_is_valid.sh --address $CLIENT_MAC)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client MAC is not valid.">&2;
		exit 2;
	fi
	
	if [ -z $CLIENT_IP ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address must be provided.">&2;
		exit 2;
	fi
	
	if [ "$(./check_ipv4_address_is_valid.sh --address $CLIENT_IP)" = "false" ]; then
		echo "$OPERATION_DESCRIPTION_STRING; client address is not valid.">&2;
		exit 2;
	fi

	signature_interface $DIR $INTERFACE_NAME
	
	signature_mac "0x0800" $VLAN_ID_DOT1Q $SERVER_MAC $CLIENT_MAC
	
	signature_ipv4 $SERVER_IP $CLIENT_IP
	
	signature_protocol "17" $PORT_HTTPS_SERVER $PORT_EPHEMERAL
	
	match_tcp_flags_ack_set
	
	add_line "\t\tct state established \\\\";
	
	if [ -n $SERVICE_UID ]; then
		add_line "\t\tmeta skuid $SERVICE_UID \\\\";
	fi
	
	add_line "\t\tlog prefix \"UDP HTTPS response\" \\\\";
	add_line "\t\tlog level notice \\\\";
	add_line "\t\tlog flags skuid flags ether \\\\";
}
